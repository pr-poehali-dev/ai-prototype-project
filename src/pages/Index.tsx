import { useState } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import Icon from '@/components/ui/icon';
import { toast } from 'sonner';

type TabType = 'chat' | 'settings' | 'analytics' | 'knowledge';

interface Message {
  id: number;
  text: string;
  sender: 'bot' | 'user';
  timestamp: Date;
}

interface Lead {
  name: string;
  email: string;
  phone: string;
  message: string;
  timestamp: Date;
}

const Index = () => {
  const [activeTab, setActiveTab] = useState<TabType>('chat');
  const [messages, setMessages] = useState<Message[]>([
    {
      id: 1,
      text: 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?',
      sender: 'bot',
      timestamp: new Date(),
    },
  ]);
  const [inputValue, setInputValue] = useState('');
  const [leads, setLeads] = useState<Lead[]>([]);
  const [leadForm, setLeadForm] = useState({
    name: '',
    email: '',
    phone: '',
    message: '',
  });
  const [isCollectingLead, setIsCollectingLead] = useState(false);

  const handleSendMessage = () => {
    if (!inputValue.trim()) return;

    const userMessage: Message = {
      id: messages.length + 1,
      text: inputValue,
      sender: 'user',
      timestamp: new Date(),
    };

    setMessages([...messages, userMessage]);
    setInputValue('');

    setTimeout(() => {
      const botResponse: Message = {
        id: messages.length + 2,
        text: getBotResponse(inputValue),
        sender: 'bot',
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, botResponse]);
    }, 800);
  };

  const getBotResponse = (userInput: string): string => {
    const input = userInput.toLowerCase();
    
    if (input.includes('–ø—Ä–∏–≤–µ—Ç') || input.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')) {
      return 'üéâ –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?';
    }
    if (input.includes('–ø–æ–º–æ—â—å') || input.includes('–ø–æ–º–æ–≥–∏')) {
      return 'üí° –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö. –•–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?';
    }
    if (input.includes('–∑–∞—è–≤–∫–∞') || input.includes('–∫–æ–Ω—Ç–∞–∫—Ç')) {
      setIsCollectingLead(true);
      return 'üìù –û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–æ–ª–Ω–∏ —Ñ–æ—Ä–º—É –Ω–∏–∂–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É!';
    }
    if (input.includes('—Ü–µ–Ω–∞') || input.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å')) {
      return 'üí∞ –¶–µ–Ω—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –æ—Ç 1000‚ÇΩ. –û—Å—Ç–∞–≤—å –∑–∞—è–≤–∫—É –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞!';
    }
    
    return 'ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.';
  };

  const handleSubmitLead = () => {
    if (!leadForm.name || !leadForm.email) {
      toast.error('–ó–∞–ø–æ–ª–Ω–∏ –∏–º—è –∏ email!');
      return;
    }

    const newLead: Lead = {
      ...leadForm,
      timestamp: new Date(),
    };

    setLeads([...leads, newLead]);
    setLeadForm({ name: '', email: '', phone: '', message: '' });
    setIsCollectingLead(false);
    
    toast.success('‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');

    const confirmMessage: Message = {
      id: messages.length + 1,
      text: `‚ú® –°–ø–∞—Å–∏–±–æ, ${newLead.name}! –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –°–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è!`,
      sender: 'bot',
      timestamp: new Date(),
    };
    setMessages([...messages, confirmMessage]);
  };

  const renderChat = () => (
    <div className="flex flex-col h-[calc(100vh-180px)]">
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((msg) => (
          <div
            key={msg.id}
            className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'} animate-slide-up`}
          >
            <div
              className={`max-w-[70%] p-3 retro-border ${
                msg.sender === 'user'
                  ? 'bg-primary text-primary-foreground border-primary'
                  : 'bg-secondary text-secondary-foreground border-secondary'
              }`}
            >
              <p className="text-sm leading-relaxed break-words">{msg.text}</p>
              <span className="text-xs opacity-70 mt-1 block">
                {msg.timestamp.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}
              </span>
            </div>
          </div>
        ))}

        {isCollectingLead && (
          <Card className="p-4 retro-border border-accent bg-card animate-fade-in">
            <h3 className="text-sm font-bold mb-4 text-accent">üìã –§–û–†–ú–ê –ó–ê–Ø–í–ö–ò</h3>
            <div className="space-y-3">
              <Input
                placeholder="–¢–≤–æ—ë –∏–º—è *"
                value={leadForm.name}
                onChange={(e) => setLeadForm({ ...leadForm, name: e.target.value })}
                className="retro-border border-muted"
              />
              <Input
                type="email"
                placeholder="Email *"
                value={leadForm.email}
                onChange={(e) => setLeadForm({ ...leadForm, email: e.target.value })}
                className="retro-border border-muted"
              />
              <Input
                type="tel"
                placeholder="–¢–µ–ª–µ—Ñ–æ–Ω"
                value={leadForm.phone}
                onChange={(e) => setLeadForm({ ...leadForm, phone: e.target.value })}
                className="retro-border border-muted"
              />
              <Textarea
                placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ"
                value={leadForm.message}
                onChange={(e) => setLeadForm({ ...leadForm, message: e.target.value })}
                className="retro-border border-muted"
              />
              <Button
                onClick={handleSubmitLead}
                className="w-full retro-button bg-accent hover:bg-accent/90 border-accent"
              >
                –û–¢–ü–†–ê–í–ò–¢–¨
              </Button>
            </div>
          </Card>
        )}
      </div>

      <div className="p-4 border-t-2 border-primary bg-card">
        <div className="flex gap-2">
          <Input
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
            placeholder="–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
            className="flex-1 retro-border border-primary bg-input"
          />
          <Button
            onClick={handleSendMessage}
            className="retro-button bg-primary hover:bg-primary/90 border-primary px-6"
          >
            <Icon name="Send" size={20} />
          </Button>
        </div>
      </div>
    </div>
  );

  const renderAnalytics = () => (
    <div className="p-6 space-y-6 animate-fade-in">
      <h2 className="text-xl font-bold text-primary text-shadow-retro">üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card className="p-6 retro-border border-primary bg-card text-center">
          <div className="text-4xl font-bold text-primary mb-2">{messages.length}</div>
          <p className="text-sm text-muted-foreground">–í–°–ï–ì–û –°–û–û–ë–©–ï–ù–ò–ô</p>
        </Card>
        
        <Card className="p-6 retro-border border-secondary bg-card text-center">
          <div className="text-4xl font-bold text-secondary mb-2">{leads.length}</div>
          <p className="text-sm text-muted-foreground">–°–û–ë–†–ê–ù–û –õ–ò–î–û–í</p>
        </Card>
        
        <Card className="p-6 retro-border border-accent bg-card text-center">
          <div className="text-4xl font-bold text-accent mb-2">
            {leads.length > 0 ? Math.round((leads.length / messages.length) * 100) : 0}%
          </div>
          <p className="text-sm text-muted-foreground">–ö–û–ù–í–ï–†–°–ò–Ø</p>
        </Card>
      </div>

      <Card className="p-6 retro-border border-primary bg-card">
        <h3 className="text-sm font-bold mb-4 text-primary">üìà –ì–†–ê–§–ò–ö –ê–ö–¢–ò–í–ù–û–°–¢–ò</h3>
        <div className="flex items-end justify-around h-40 gap-2">
          {[65, 85, 45, 95, 75, 55, 80].map((height, idx) => (
            <div
              key={idx}
              className="flex-1 bg-gradient-90s retro-border border-primary transition-all hover:opacity-80"
              style={{ height: `${height}%` }}
            />
          ))}
        </div>
        <div className="flex justify-around mt-2 text-xs text-muted-foreground">
          <span>–ü–ù</span>
          <span>–í–¢</span>
          <span>–°–†</span>
          <span>–ß–¢</span>
          <span>–ü–¢</span>
          <span>–°–ë</span>
          <span>–í–°</span>
        </div>
      </Card>

      <Card className="p-6 retro-border border-secondary bg-card">
        <h3 className="text-sm font-bold mb-4 text-secondary">üéØ –ü–û–°–õ–ï–î–ù–ò–ï –õ–ò–î–´</h3>
        {leads.length === 0 ? (
          <p className="text-muted-foreground text-center py-8">–ü–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–æ–≤</p>
        ) : (
          <div className="space-y-3">
            {leads.slice(-5).reverse().map((lead, idx) => (
              <div key={idx} className="p-3 bg-muted retro-border border-muted">
                <div className="flex justify-between items-start mb-2">
                  <span className="font-bold text-foreground">{lead.name}</span>
                  <span className="text-xs text-muted-foreground">
                    {lead.timestamp.toLocaleDateString('ru-RU')}
                  </span>
                </div>
                <p className="text-sm text-muted-foreground">{lead.email}</p>
                {lead.phone && <p className="text-sm text-muted-foreground">{lead.phone}</p>}
              </div>
            ))}
          </div>
        )}
      </Card>
    </div>
  );

  const renderSettings = () => (
    <div className="p-6 space-y-6 animate-fade-in">
      <h2 className="text-xl font-bold text-primary text-shadow-retro">‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò</h2>
      
      <Card className="p-6 retro-border border-primary bg-card">
        <h3 className="text-sm font-bold mb-4 text-primary">ü§ñ –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê</h3>
        <div className="space-y-4">
          <div>
            <label className="text-sm font-medium mb-2 block">–ò–º—è –±–æ—Ç–∞</label>
            <Input defaultValue="AI –ü–æ–º–æ—â–Ω–∏–∫ 2025" className="retro-border border-muted" />
          </div>
          <div>
            <label className="text-sm font-medium mb-2 block">–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</label>
            <Textarea
              defaultValue="üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫!"
              className="retro-border border-muted"
            />
          </div>
        </div>
      </Card>

      <Card className="p-6 retro-border border-secondary bg-card">
        <h3 className="text-sm font-bold mb-4 text-secondary">üîó –ò–ù–¢–ï–ì–†–ê–¶–ò–ò</h3>
        <div className="space-y-3">
          <div className="flex items-center justify-between p-3 bg-muted retro-border border-muted">
            <span className="text-sm">CRM –°–∏—Å—Ç–µ–º–∞</span>
            <Button size="sm" variant="outline" className="retro-button border-primary">
              –ü–û–î–ö–õ–Æ–ß–ò–¢–¨
            </Button>
          </div>
          <div className="flex items-center justify-between p-3 bg-muted retro-border border-muted">
            <span className="text-sm">Email —Ä–∞—Å—Å—ã–ª–∫–∞</span>
            <Button size="sm" variant="outline" className="retro-button border-primary">
              –ü–û–î–ö–õ–Æ–ß–ò–¢–¨
            </Button>
          </div>
          <div className="flex items-center justify-between p-3 bg-muted retro-border border-muted">
            <span className="text-sm">Telegram</span>
            <Button size="sm" variant="outline" className="retro-button border-primary">
              –ü–û–î–ö–õ–Æ–ß–ò–¢–¨
            </Button>
          </div>
        </div>
      </Card>
    </div>
  );

  const renderKnowledge = () => (
    <div className="p-6 space-y-6 animate-fade-in">
      <h2 className="text-xl font-bold text-primary text-shadow-retro">üìö –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô</h2>
      
      <Card className="p-6 retro-border border-accent bg-card">
        <h3 className="text-sm font-bold mb-4 text-accent">‚ûï –î–û–ë–ê–í–ò–¢–¨ –°–¢–ê–¢–¨–Æ</h3>
        <div className="space-y-3">
          <Input placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫" className="retro-border border-muted" />
          <Textarea placeholder="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏..." className="retro-border border-muted" rows={6} />
          <Button className="retro-button bg-accent hover:bg-accent/90 border-accent">
            –°–û–•–†–ê–ù–ò–¢–¨
          </Button>
        </div>
      </Card>

      <Card className="p-6 retro-border border-primary bg-card">
        <h3 className="text-sm font-bold mb-4 text-primary">üìñ –°–¢–ê–¢–¨–ò</h3>
        <div className="space-y-3">
          {['–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–∞—Ç-–±–æ—Ç?', '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM', '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤'].map((title, idx) => (
            <div key={idx} className="p-4 bg-muted retro-border border-muted hover:border-primary transition-colors cursor-pointer">
              <div className="flex items-center justify-between">
                <span className="font-medium">{title}</span>
                <Icon name="ChevronRight" size={20} className="text-muted-foreground" />
              </div>
            </div>
          ))}
        </div>
      </Card>
    </div>
  );

  return (
    <div className="min-h-screen bg-background">
      <div className="gradient-90s p-6 retro-border border-primary">
        <div className="max-w-7xl mx-auto">
          <h1 className="text-2xl md:text-3xl font-bold text-white text-shadow-retro mb-2">
            ü§ñ AI –ß–ê–¢-–ë–û–¢ 2027
          </h1>
          <p className="text-white/90 text-sm">–ó–∞–ø—É—Å–∫: 12 –¥–µ–∫–∞–±—Ä—è 2027 –≥–æ–¥–∞ ‚Ä¢ –ü–æ—Ä–∞–±–æ—Ç–∞–µ–º!</p>
        </div>
      </div>

      <div className="max-w-7xl mx-auto p-4">
        <div className="flex gap-2 mb-4 overflow-x-auto pb-2">
          {[
            { id: 'chat', label: '–ß–ê–¢', icon: 'MessageSquare' },
            { id: 'analytics', label: '–ê–ù–ê–õ–ò–¢–ò–ö–ê', icon: 'BarChart3' },
            { id: 'settings', label: '–ù–ê–°–¢–†–û–ô–ö–ò', icon: 'Settings' },
            { id: 'knowledge', label: '–ë–ê–ó–ê –ó–ù–ê–ù–ò–ô', icon: 'BookOpen' },
          ].map((tab) => (
            <Button
              key={tab.id}
              onClick={() => setActiveTab(tab.id as TabType)}
              className={`retro-button flex-shrink-0 ${
                activeTab === tab.id
                  ? 'bg-primary border-primary'
                  : 'bg-muted border-muted hover:bg-muted/80'
              }`}
            >
              <Icon name={tab.icon as any} size={16} className="mr-2" />
              {tab.label}
            </Button>
          ))}
        </div>

        <Card className="retro-border border-primary bg-card overflow-hidden">
          {activeTab === 'chat' && renderChat()}
          {activeTab === 'analytics' && renderAnalytics()}
          {activeTab === 'settings' && renderSettings()}
          {activeTab === 'knowledge' && renderKnowledge()}
        </Card>
      </div>

      <div className="fixed bottom-4 right-4 flex items-center gap-2 bg-accent px-4 py-2 retro-border border-accent text-accent-foreground">
        <div className="w-2 h-2 bg-green-500 rounded-full animate-blink" />
        <span className="text-xs font-bold">–ê–õ–¨–§–ê 0</span>
      </div>
    </div>
  );
};

export default Index;